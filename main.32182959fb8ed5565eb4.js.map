{"version":3,"sources":["webpack:///./js/delay.js","webpack:///./js/toggle_user_state.js","webpack:///./js/transaction.js","webpack:///./index.js"],"names":["delay","ms","Promise","resolve","setTimeout","toggleUserState","allUsers","userName","map","user","name","active","makeTransaction","transaction","min","max","Math","floor","random","reject","id","time","loggerDelay","console","log","then","users","loggerToggle","updatedUsers","table","logSuccess","logError","warn","amount","catch"],"mappings":"mIAAO,MAAMA,EAASC,GACX,IAAIC,QAASC,IAChBC,WAAW,KACPD,EAAQF,IACTA,KCJEI,EAAkB,CAACC,EAAUC,IAC/B,IAAIL,QAASC,IAChBA,EACIG,EAASE,IAAKC,GACVA,EAAKC,OAASH,EACR,IAAKE,EAAME,QAASF,EAAKE,QACzBF,MCFTG,EAAmBC,IAC5B,MAAMb,GALyBc,EAKS,IALJC,EAKS,IAJtCC,KAAKC,MAAMD,KAAKE,UAAYH,EAAMD,EAAM,GAAKA,IADtB,IAACA,EAAKC,EAOpC,OAAO,IAAIb,QAAQ,CAACC,EAASgB,KACzBf,WAAW,KACYY,KAAKE,SAAW,IAG/Bf,EAAQ,CAAEiB,GAAIP,EAAYO,GAAIC,KAAMrB,IAGxCmB,EAAO,CAAEC,GAAIP,EAAYO,MAC1BpB,MCTLsB,EAAeD,GAASE,QAAQC,IAAK,kBAAiBH,QAG5DrB,EAAM,KAAMyB,KAAKH,GACjBtB,EAAM,KAAMyB,KAAKH,GACjBtB,EAAM,MAAMyB,KAAKH,GAIjB,MAAMI,EAAQ,CACV,CAAEhB,KAAM,QAASC,QAAQ,GACzB,CAAED,KAAM,OAAQC,QAAQ,GACxB,CAAED,KAAM,OAAQC,QAAQ,GACxB,CAAED,KAAM,MAAOC,QAAQ,IAGrBgB,EAAgBC,GAAiBL,QAAQM,MAAMD,GAKrDvB,EAAgBqB,EAAO,SAASD,KAAKE,GACrCtB,EAAgBqB,EAAO,OAAOD,KAAKE,GAGnC,MAAMG,EAAa,EAAGV,KAAIC,WACtBE,QAAQC,IAAK,eAAcJ,kBAAmBC,SAG5CU,EAAW,EAAGX,SAChBG,QAAQS,KAAM,gCAA+BZ,+BAMjDR,EAAgB,CAAEQ,GAAI,GAAIa,OAAQ,MAAOR,KAAKK,GAAYI,MAAMH,GAChEnB,EAAgB,CAAEQ,GAAI,GAAIa,OAAQ,MAAOR,KAAKK,GAAYI,MAAMH,GAChEnB,EAAgB,CAAEQ,GAAI,GAAIa,OAAQ,KAAMR,KAAKK,GAAYI,MAAMH,GAC/DnB,EAAgB,CAAEQ,GAAI,GAAIa,OAAQ,MAAOR,KAAKK,GAAYI,MAAMH,K","file":"main.32182959fb8ed5565eb4.js","sourcesContent":["export const delay = (ms) => {\n    return new Promise((resolve) => {\n        setTimeout(() => {\n            resolve(ms);\n        }, ms);\n    });\n};\n\nconst logger = (time) => console.log(`Resolved after ${time}ms`);\n","export const toggleUserState = (allUsers, userName) => {\n    return new Promise((resolve) => {\n        resolve(\n            allUsers.map((user) =>\n                user.name === userName\n                    ? { ...user, active: !user.active }\n                    : user\n            )\n        );\n    });\n};\n\n// export const toggleUserState = (allUsers, userName, callback) => {\n//     const updatedUsers = allUsers.map((user) =>\n//         user.name === userName ? { ...user, active: !user.active } : user\n//     );\n\n//     callback(updatedUsers);\n// };\n","const randomIntegerFromInterval = (min, max) => {\n    return Math.floor(Math.random() * (max - min + 1) + min);\n};\n\nexport const makeTransaction = (transaction) => {\n    const delay = randomIntegerFromInterval(200, 500);\n\n    return new Promise((resolve, reject) => {\n        setTimeout(() => {\n            const canProcess = Math.random() > 0.3;\n\n            if (canProcess) {\n                resolve({ id: transaction.id, time: delay });\n            }\n\n            reject({ id: transaction.id });\n        }, delay);\n    });\n};\n","import \"./styles.css\";\nimport { delay } from \"./js/delay\";\nimport { toggleUserState } from \"./js/toggle_user_state\";\nimport { makeTransaction } from \"./js/transaction\";\n\n// TASK 1\n\nconst loggerDelay = (time) => console.log(`Resolved after ${time} ms`);\n\n// Вызовы функции для проверки\ndelay(2000).then(loggerDelay); // Resolved after 2000ms\ndelay(1000).then(loggerDelay); // Resolved after 1000ms\ndelay(1500).then(loggerDelay); // Resolved after 1500ms\n\n// TASK 2\n\nconst users = [\n    { name: \"Mango\", active: true },\n    { name: \"Poly\", active: false },\n    { name: \"Ajax\", active: true },\n    { name: \"Lux\", active: false },\n];\n\nconst loggerToggle = (updatedUsers) => console.table(updatedUsers);\n\n// /*\n//  * Должно работать так\n//  */\ntoggleUserState(users, \"Mango\").then(loggerToggle);\ntoggleUserState(users, \"Lux\").then(loggerToggle);\n\n// TASK 3\nconst logSuccess = ({ id, time }) => {\n    console.log(`Transaction ${id} processed in ${time} ms`);\n};\n\nconst logError = ({ id }) => {\n    console.warn(`Error processing transaction ${id}. Please try again later.`);\n};\n\n/*\n * Должно работать так\n */\nmakeTransaction({ id: 70, amount: 150 }).then(logSuccess).catch(logError);\nmakeTransaction({ id: 71, amount: 230 }).then(logSuccess).catch(logError);\nmakeTransaction({ id: 72, amount: 75 }).then(logSuccess).catch(logError);\nmakeTransaction({ id: 73, amount: 100 }).then(logSuccess).catch(logError);\n"],"sourceRoot":""}